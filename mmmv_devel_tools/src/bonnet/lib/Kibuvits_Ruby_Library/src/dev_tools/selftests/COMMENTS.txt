===========================================================================
================  Kibuvits Ruby Library (KRL) Selftests  ==================
===========================================================================


---------------------------------------------------------------------------
                         Table of Contents
---------------------------------------------------------------------------
1. Overview

---------------------------------------------------------------------------
                        1. Overview
---------------------------------------------------------------------------

Almost all of the KRL classes have a static method named "selftest".
The selftests are, by their nature, usually almost as thorough
demo code as it can get. The KRL code is aimed to be self-explanatory.

The ./ marks the folder that contains the COMMENTS.txt that 
You are currently reading.

To run all of the "selftest" methods within the KRL, one should
execute the 

ruby -Ku ../run_all_kibuvits_selftests.rb 

without giving it any console arguments. 

To run the selftest of a single class
without running all of the KRL selftests, one should give the
class name as the first console argument.
The "-l", like 

cd ../; ruby -Ku ./run_all_kibuvits_selftests.rb -l

lists the KRL classes that have the "selftest" method.

The tests that are called by the class's selftest method, usually
reside right after the method/function being tested. 
The reason for such an arrangement is only subjective, technical, 
taste, preference. Classes that do not contain the 
selftest code within themselves, have a special selftest class
in the ./ or one of its subfolders. 
Usually the selftest class name starts with the name of the 
class that it tests and has a suffix of "_selftest". For example,
a selftest class of class The_most_awesome_library_ever is called
The_most_awesome_library_ever_selftest . 

The main benefit of placing the selftest code right next to 
the code that it tests is that if one uses 
test-driven development, the source of various small functions
is not scattered around the library, thus the library layout 
becomes somewhat simpler. 
As IDE navigation takes the developer to the location of 
the function of interest, the selftests code serves the 
role of being a verified, proven, reliable, documentation of 
the function. Very often, when in doubt about the
concrete behavior of some method, one can find a trustworthy
answer from the code that tests the function. 


==========================================================================

